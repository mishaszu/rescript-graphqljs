// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_dict = require("rescript/lib/js/js_dict.js");
var Graphql = require("graphql");
var Js_option = require("rescript/lib/js/js_option.js");
var Js_undefined = require("rescript/lib/js/js_undefined.js");

var ResolverInfo = {};

var Types = {};

function make(input) {
  var v = input.defaultValue;
  return {
          type: input.type,
          defaultValue: Js_undefined.fromOption(v !== undefined ? Js_option.some(v.VAL) : undefined),
          description: Js_undefined.fromOption(input.description)
        };
}

function merge(input1, key, input2) {
  var input = make(input2);
  input1[key] = input;
  return input1;
}

function mergeMany(input1, input2) {
  return Js_dict.entries(input2).reduce((function (accu, param) {
                return merge(accu, param[0], param[1]);
              }), input1);
}

var Input = {
  make: make,
  merge: merge,
  mergeMany: mergeMany
};

function make$1(r) {
  return Js_option.map((function (i) {
                return i;
              }), r);
}

var Resolver = {
  make: make$1
};

function empty() {
  return {};
}

function addField(fields, key, field) {
  fields[key] = field;
  return fields;
}

function makeField(f) {
  var variant = f.NAME;
  if (variant === "Field2") {
    var f$1 = f.VAL;
    return {
            type: f$1.type,
            description: f$1.description,
            deprecationReason: Js_undefined.fromOption(f$1.deprecationReason),
            args: Js_undefined.fromOption(undefined),
            resolver: Js_undefined.fromOption(undefined)
          };
  }
  if (variant === "Field3") {
    var f$2 = f.VAL;
    return {
            type: f$2.type_,
            description: f$2.description,
            deprecationReason: Js_undefined.fromOption(f$2.deprecationReason),
            args: Js_undefined.fromOption(undefined),
            resolver: Js_undefined.fromOption((function (__x) {
                      return Js_option.map((function (a) {
                                    return a;
                                  }), __x);
                    })(f$2.resolve))
          };
  }
  var f$3 = f.VAL;
  return {
          type: f$3.type_,
          description: Js_undefined.fromOption(f$3.description),
          deprecationReason: Js_undefined.fromOption(f$3.deprecationReason),
          args: Js_undefined.fromOption(f$3.args),
          resolver: Js_undefined.fromOption((function (__x) {
                    return Js_option.map((function (a) {
                                  return a;
                                }), __x);
                  })(f$3.resolve))
        };
}

function make$2(fields) {
  var dict = {};
  Js_dict.entries(fields).forEach(function (param) {
        dict[param[0]] = makeField(param[1]);
      });
  return dict;
}

var Field = {
  Resolver: Resolver,
  empty: empty,
  addField: addField,
  makeField: makeField,
  make: make$2
};

var $$Object = {};

var Internal = {};

function make$3(model) {
  return new Graphql.GraphQLObjectType({
              name: model.name,
              description: Js_undefined.fromOption(model.description),
              interfaces: Js_undefined.fromOption(model.interfaces),
              fields: model.fields
            });
}

var ModelType = {
  Internal: Internal,
  make: make$3
};

function make$4(resolver) {
  return resolver;
}

function responseTypeMake(name, description, dataType, errorType) {
  return make$3({
              name: name,
              description: description !== undefined ? description : "Response wrapper type for " + name,
              fields: make$2(addField(addField({}, "data", {
                            NAME: "Field2",
                            VAL: {
                              type: dataType,
                              description: "Data field wraps OK response"
                            }
                          }), "error", {
                        NAME: "Field2",
                        VAL: {
                          type: errorType,
                          description: "Error field wraps error response"
                        }
                      }))
            });
}

var DataResolver = {
  make: make$4,
  dataFieldMake: undefined,
  responseTypeMake: responseTypeMake
};

var Internal$1 = {};

function make$5(model) {
  return {
          type: model.type,
          description: Js_undefined.fromOption(model.description),
          args: Js_undefined.fromOption(model.args),
          resolve: model.resolve
        };
}

var Model = {
  Internal: Internal$1,
  make: make$5
};

function empty$1(name) {
  return {
          name: name,
          fields: {}
        };
}

function addField$1(query, key, field) {
  query.fields[key] = field;
  return query;
}

var Internal$2 = {};

function make$6(query) {
  return new Graphql.GraphQLObjectType({
              name: query.name,
              fields: query.fields
            });
}

var Query = {
  empty: empty$1,
  addField: addField$1,
  Internal: Internal$2,
  make: make$6
};

function empty$2(name) {
  return {
          name: name,
          fields: {}
        };
}

function addField$2(mutation, key, field) {
  mutation.fields[key] = field;
  return mutation;
}

var Internal$3 = {};

function make$7(mutation) {
  return new Graphql.GraphQLObjectType({
              name: mutation.name,
              fields: mutation.fields
            });
}

var Mutation = {
  empty: empty$2,
  addField: addField$2,
  Internal: Internal$3,
  make: make$7
};

var Internal$4 = {};

function make$8(config) {
  return new Graphql.GraphQLSchema({
              query: config.query,
              mutation: Js_undefined.fromOption(config.mutation)
            });
}

var Fs = {};

var Schema = {
  Internal: Internal$4,
  make: make$8,
  Fs: Fs
};

var Self = {};

exports.ResolverInfo = ResolverInfo;
exports.Types = Types;
exports.Input = Input;
exports.Field = Field;
exports.$$Object = $$Object;
exports.ModelType = ModelType;
exports.DataResolver = DataResolver;
exports.Model = Model;
exports.Query = Query;
exports.Mutation = Mutation;
exports.Schema = Schema;
exports.Self = Self;
/* graphql Not a pure module */
